# -*- coding: utf-8 -*-
"""Agente Planejador de Rotas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lENTzP44u4DqcJOEHZy-s3EEZf5kScr9
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Commented out IPython magic to ensure Python compatibility.
# Instalar Framework ADK de agentes do Google ################################################
# %pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

from datetime import date
from IPython.display import display, Markdown as md  # Mantendo para exibi√ß√£o formatada

####################################################
# --- Agente 1: Buscador de Informa√ß√µes de Rotas --- #
####################################################
def agente_buscador(localizacao, preferencias):
    buscador = Agent(
        name="agente_buscador_rotas",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um assistente de pesquisa especializado em encontrar informa√ß√µes relevantes para a cria√ß√£o de rotas de caminhada e corrida.
        Sua tarefa √© utilizar mecanismos de busca (como o Google Search) para localizar informa√ß√µes sobre:
        - Trilhas, parques, √°reas verdes e ruas tranquilas adequadas para caminhada e corrida na localiza√ß√£o fornecida: {localizacao}.
        - Prefer√™ncias do usu√°rio, como tipo de terreno (plano, montanhoso), n√≠vel de dificuldade desejado (f√°cil, moderado, dif√≠cil), dist√¢ncia aproximada e tipos de paisagens preferidas (natureza, urbana, beira-mar, etc.): {preferencias}.
        - Informa√ß√µes sobre seguran√ßa, acessibilidade (transporte p√∫blico, estacionamento) e comodidades (banheiros, bebedouros) nas √°reas identificadas.
        Priorize informa√ß√µes de fontes confi√°veis como sites de prefeituras, guias de trilhas, aplicativos de corrida/caminhada e relatos de usu√°rios.
        Tente encontrar pelo menos 3-5 op√ß√µes de locais ou rotas que pare√ßam promissoras com base nos crit√©rios fornecidos.
        """,
        description="Agente que busca informa√ß√µes sobre locais para rotas.",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"Localiza√ß√£o: {localizacao}\nPrefer√™ncias: {preferencias}"
    locais_encontrados = call_agent(buscador, entrada_do_agente_buscador)
    return locais_encontrados

#####################################################
# --- Agente 2: Planejador de Rotas Personalizadas --- #
#####################################################
def agente_planejador(localizacao, preferencias, locais_encontrados):
    planejador = Agent(
        name="agente_planejador_rotas",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um planejador de rotas de caminhada e corrida especializado em criar percursos personalizados.
        Com base nos locais e informa√ß√µes encontrados pelo agente buscador ({locais_encontrados}), e considerando a localiza√ß√£o do usu√°rio ({localizacao}) e suas prefer√™ncias ({preferencias}), sua tarefa √©:
        - Detalhar as caracter√≠sticas de cada local promissor (tipo de terreno, eleva√ß√£o, sombra, seguran√ßa, etc.).
        - Utilizar o Google Search para obter informa√ß√µes mais detalhadas sobre rotas existentes nesses locais, incluindo mapas, dist√¢ncias e avalia√ß√µes de outros usu√°rios.
        - Combinar informa√ß√µes de diferentes fontes para propor pelo menos 2-3 sugest√µes de rotas personalizadas que atendam √†s prefer√™ncias do usu√°rio.
        - Para cada rota sugerida, inclua detalhes como:
            - Descri√ß√£o do percurso.
            - Dist√¢ncia aproximada.
            - N√≠vel de dificuldade estimado.
            - Pontos de interesse ao longo do caminho.
            - Sugest√µes de como chegar ao ponto de partida (transporte p√∫blico, carro).
            - Considera√ß√µes de seguran√ßa.
        """,
        description="Agente que planeja rotas personalizadas.",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Localiza√ß√£o: {localizacao}\nPrefer√™ncias: {preferencias}\nLocais encontrados: {locais_encontrados}"
    rotas_planejadas = call_agent(planejador, entrada_do_agente_planejador)
    return rotas_planejadas

############################################
# --- Agente 3: Otimizador de Rotas --- #
############################################
def agente_redator(localizacao, preferencias, rotas_planejadas):
    otimizador = Agent(
        name="agente_otimizador_rotas",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um especialista em otimiza√ß√£o de rotas de caminhada e corrida.
        Com base nas rotas planejadas ({rotas_planejadas}) para a localiza√ß√£o ({localizacao}) e as prefer√™ncias do usu√°rio ({preferencias}), sua fun√ß√£o √©:
        - Refinar as rotas propostas, considerando fatores como eleva√ß√£o (para adequar ao n√≠vel de dificuldade), seguran√ßa (evitando √°reas de risco), e beleza c√™nica (se solicitado).
        - Sugerir varia√ß√µes das rotas planejadas, como atalhos ou extens√µes, para diferentes n√≠veis de energia ou tempo dispon√≠vel.
        - Se aplic√°vel, fornecer informa√ß√µes sobre transporte p√∫blico para acessar diferentes pontos das rotas.
        - Apresentar as rotas de forma clara e concisa, destacando os principais benef√≠cios de cada uma.
        """,
        description="Agente que otimiza e detalha as rotas.",
    )
    entrada_do_agente_redator = f"Localiza√ß√£o: {localizacao}\nPrefer√™ncias: {preferencias}\nRotas planejadas: {rotas_planejadas}"
    rotas_otimizadas = call_agent(otimizador, entrada_do_agente_redator)
    return rotas_otimizadas

#################################################
# --- Agente 4: Avaliador de Rotas e Feedback --- #
#################################################
def agente_revisor(localizacao, preferencias, rotas_otimizadas):
    avaliador = Agent(
        name="agente_avaliador_rotas",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um avaliador de rotas de caminhada e corrida com foco na experi√™ncia do usu√°rio.
        Revise as rotas otimizadas ({rotas_otimizadas}) criadas para a localiza√ß√£o ({localizacao}) e as prefer√™ncias do usu√°rio ({preferencias}). Sua tarefa √©:
        - Avaliar se as rotas propostas atendem de forma clara e eficaz √†s prefer√™ncias e necessidades do usu√°rio.
        - Verificar se as informa√ß√µes fornecidas s√£o pr√°ticas, √∫teis e f√°ceis de entender.
        - Sugerir melhorias na descri√ß√£o das rotas, como adicionar informa√ß√µes sobre o tipo de cal√ßamento, disponibilidade de sombra, ou pontos de aten√ß√£o.
        - Fornecer um resumo conciso das melhores op√ß√µes de rotas, destacando os principais atrativos de cada uma.
        """,
        description="Agente que avalia as rotas e fornece feedback.",
    )
    entrada_do_agente_revisor = f"Localiza√ß√£o: {localizacao}\nPrefer√™ncias: {preferencias}\nRotas otimizadas: {rotas_otimizadas}"
    feedback_rotas = call_agent(avaliador, entrada_do_agente_revisor)
    return feedback_rotas

data_de_hoje = date.today().strftime("%d/%m/%Y") # Mantendo, embora n√£o seja diretamente usado agora

print("üèÉ‚Äç‚ôÄÔ∏è Iniciando o Sistema Inteligente de Gera√ß√£o de Rotas Personalizadas üèÉ‚Äç‚ôÇÔ∏è")

# --- Obter a Localiza√ß√£o e Prefer√™ncias do Usu√°rio ---
localizacao = input("üìç Por favor, digite a sua LOCALIZA√á√ÉO para buscar rotas: ")
preferencias = input("üëü Quais s√£o suas PREFER√äNCIAS para a rota? (ex: dist√¢ncia, n√≠vel de dificuldade, tipo de paisagem): ")

# Inserir l√≥gica do sistema de agentes ################################################
if not localizacao:
    print("Voc√™ n√£o digitou uma localiza√ß√£o. Por favor, tente novamente.")
elif not preferencias:
    print("Voc√™ n√£o digitou suas prefer√™ncias. Por favor, tente novamente.")
else:
    print(f"Maravilha! Vamos encontrar rotas personalizadas para {localizacao} com suas prefer√™ncias: {preferencias}")

    locais_encontrados = agente_buscador(localizacao, preferencias)
    print("\n--- üó∫Ô∏è Resultado do Agente 1 (Buscador de Locais) ---\n")
    display(md(locais_encontrados))
    print("---------------------------------------------------------------------")

    rotas_planejadas = agente_planejador(localizacao, preferencias, locais_encontrados)
    print("\n--- üó∫Ô∏è Resultado do Agente 2 (Planejador de Rotas) ---\n")
    display(md(rotas_planejadas))
    print("---------------------------------------------------------------------")

    rotas_otimizadas = agente_redator(localizacao, preferencias, rotas_planejadas)
    print("\n--- üó∫Ô∏è Resultado do Agente 3 (Otimizador de Rotas) ---\n")
    display(md(rotas_otimizadas))
    print("---------------------------------------------------------------------")

    feedback_rotas = agente_revisor(localizacao, preferencias, rotas_otimizadas)
    print("\n--- üó∫Ô∏è Resultado do Agente 4 (Avaliador de Rotas) ---\n")
    display(md(feedback_rotas))
    print("---------------------------------------------------------------------")